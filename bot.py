import nextcord
from nextcord.ext import commands, tasks
from nextcord.ui import View, Button
from nextcord import Interaction, SlashOption

import asyncio
import random
import json
from collections import Counter
from datetime import datetime, timedelta, timezone
import os
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import time
from PIL import Image, ImageDraw, ImageFont
import io
import pytz
import re

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º intents
intents = nextcord.Intents.default()
intents.members = True
intents.message_content = True  # –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
intents.voice_states = True
intents.guilds = True

bot = commands.Bot(command_prefix="!", intents=intents)

def load_jokes():
    with open('jokes.txt', 'r', encoding='utf-8') as file:
        return file.read().splitlines()

def load_predictions():
    with open('predictions.txt', 'r', encoding='utf-8') as file:
        return file.read().splitlines()

jokes = load_jokes()
predictions = load_predictions()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —à—É—Ç–æ–∫
@bot.command(name="joke", aliases=["randomjoke", "jokes"])
async def tell_joke(ctx):
    joke = random.choice(jokes)
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()
    await ctx.send(f"{ctx.author.mention} {joke}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
@bot.command(name="predict", aliases=["fortune", "prophecy"])
async def tell_prediction(ctx):
    prediction = random.choice(predictions)
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()
    await ctx.send(f"{ctx.author.mention} {prediction}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@bot.command(name="greet")
async def greet_user(ctx, member: nextcord.Member):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.send(f"–ü—Ä–∏–≤–µ—Ç {member.mention} –æ—Ç –±–æ—Ç–∞ –±–∞–∑–∞—Ä—á–∏–∫ –ø–º")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º—É—Ç–∞
@bot.command(name="mute")
@commands.has_permissions(administrator=True)  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
async def mute(ctx, member: nextcord.Member, time: int):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º
    await ctx.send(f"{member.mention}, —É —Ç–µ–±—è –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —è –Ω–∞–ª–æ–∂—É –º—É—Ç –Ω–∞ {time} –º–∏–Ω—É—Ç.")
    
    # –û–∂–∏–¥–∞–µ–º 1 –º–∏–Ω—É—Ç—É
    await asyncio.sleep(60)

    # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å "Muted", –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    mute_role = nextcord.utils.get(ctx.guild.roles, name="–ë–ê–ù –±–∞–Ω–∞–Ωüçå")
    if not mute_role:
        mute_role = await ctx.guild.create_role(name="Muted")
        for channel in ctx.guild.text_channels:
            await channel.set_permissions(mute_role, speak=False, send_messages=False)

    await member.add_roles(mute_role)
    await ctx.send(f"{member.mention} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ {time} –º–∏–Ω—É—Ç.")
    
    # –û–∂–∏–¥–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Å–Ω–∏–º–∞–µ–º –º—É—Ç
    await asyncio.sleep(time * 60)
    await member.remove_roles(mute_role)
    await ctx.send(f"{member.mention} –º—É—Ç –±—ã–ª —Å–Ω—è—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–∞–Ω–∞
@bot.command(name="ban")
@commands.has_permissions(administrator=True)  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
async def ban(ctx, member: nextcord.Member, time: int):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º
    await ctx.send(f"{member.mention}, —É —Ç–µ–±—è –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —è –∑–∞–±–∞–Ω—é —Ç–µ–±—è –Ω–∞ {time} –¥–Ω–µ–π.")
    
    # –û–∂–∏–¥–∞–µ–º 1 –º–∏–Ω—É—Ç—É
    await asyncio.sleep(60)
    
    await member.ban(reason="–ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è", delete_message_days=7)
    await ctx.send(f"{member.mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {time} –¥–Ω–µ–π.")
    
    # –û–∂–∏–¥–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Å–Ω–∏–º–∞–µ–º –±–∞–Ω
    await asyncio.sleep(time * 86400)
    await ctx.guild.unban(member)
    await ctx.send(f"{member.mention} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
@bot.command(name="clear")
@commands.has_permissions(administrator=True)  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
async def clear(ctx, amount: int):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()
    if amount <= 0 or amount > 100:
        await ctx.send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 100.")
        return
    deleted = await ctx.channel.purge(limit=amount)
    await ctx.send(f"–£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π.", delete_after=5)
    await ctx.channel.purge(limit=1)

@bot.command(name="clearday")
@commands.has_permissions(administrator=True)  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
async def clearday(ctx, days: int):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()
    
    if days <= 0:
        await ctx.send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É
    time_limit = datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(days=days)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    deleted = await ctx.channel.purge(after=time_limit)
    
    await ctx.send(f"–£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.", delete_after=5)    
    
@bot.command(name="clearuser")
@commands.has_permissions(administrator=True)  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
async def clearuser(ctx, member: nextcord.Member, amount: int):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()
    
    if amount <= 0:
        await ctx.send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deleted = await ctx.channel.purge(limit=amount, check=lambda message: message.author == member)
    
    await ctx.send(f"–£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {member.mention}.", delete_after=5)

    import datetime

@bot.command(name="clearuserday")
@commands.has_permissions(administrator=True)  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
async def clearuserdays(ctx, member: nextcord.Member, days: int):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()
    
    if days <= 0:
        await ctx.send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC
    time_limit = datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(days=days)
    
    deleted = 0
    async for message in ctx.channel.history(limit=200):
        if message.author == member and message.created_at >= time_limit:
            await message.delete()
            deleted += 1
    
    await ctx.send(f"–£–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {member.mention} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.", delete_after=5)

    
@bot.command(name="pick")
async def pick_user(ctx, member: nextcord.Member):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.send(f"{member.mention} –∞ –Ω—É –±—ã—Å—Ç—Ä–æ –∑–∞—à–æ–ª –∞—Ç–æ –±–∞–Ω—á–∏–∫")

    
    
import random
import asyncio
from collections import Counter
import nextcord


# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
import random
import asyncio

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã










# –ö–∞—Ä—Ç—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
card_values = {
    '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
    'J': 10, 'Q': 10, 'K': 10, 'A': 11
}

# –°–∏–º–≤–æ–ª—ã –º–∞—Å—Ç–µ–π
suits = {
    'hearts': '‚ô•',
    'diamonds': '‚ô¶',
    'clubs': '‚ô£',
    'spades': '‚ô†'
}

FUNDS_FILE = "player_funds.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏—à–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_funds():
    try:
        with open(FUNDS_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏—à–µ–∫ –≤ —Ñ–∞–π–ª
def save_funds():
    with open(FUNDS_FILE, "w") as f:
        json.dump(player_funds, f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏—à–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
player_funds = load_funds()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data(file):
    try:
        with open(file, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_data(file, data):
    with open(file, "w") as f:
        json.dump(data, f)




'''
player_businesses = load_data(BUSINESS_FILE)

# –ë–∏–∑–Ω–µ—Å—ã –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

business_rewards = {
    "–ö–∏–æ—Å–∫ —Å –µ–¥–æ–π": "–†–µ–∫–ª–∞–º–Ω—ã–π —â–∏—Ç",
    "–ê–≤—Ç–æ–º–æ–π–∫–∞": "–ö–Ω–∏–≥–∞ –ø–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É",
    "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω": "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç—ã",
    "–û—Ñ–∏—Å IT-—É—Å–ª—É–≥": "–†–∞–±–æ—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
    "–§–∏—Ç–Ω–µ—Å-–∫–ª—É–±": "–§–∏—Ä–º–µ–Ω–Ω—ã–π –∫–æ—Å—Ç—é–º"
}


# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞
def calculate_next_business_cost(user_id, base_cost):
    count = len(player_businesses.get(str(user_id), []))
    if count == 0:
        return base_cost
    elif count == 1:
        return base_cost * 5
    else:
        return base_cost * 10


# –ö–æ–º–∞–Ω–¥–∞: –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å
def is_business_name_unique(user_id, business_name):
    if user_id not in player_businesses:
        return True
    return all(business['name'] != business_name for business in player_businesses[user_id])


# –ö–æ–º–∞–Ω–¥–∞: –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
@bot.command()
async def buy_business(ctx, business_name: str, *, custom_name: str):
    user_id = str(ctx.author.id)

    if business_name not in business_types:
        await ctx.send("‚ùå –¢–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç!")
        return

    if len(player_businesses.get(user_id, [])) >= 3:
        await ctx.send("üö´ –£ –≤–∞—Å —É–∂–µ 3 –±–∏–∑–Ω–µ—Å–∞!")
        return

    if not is_business_name_unique(user_id, custom_name):
        await ctx.send(f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ '{custom_name}' —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    base_cost = business_types[business_name]["base_cost"]
    final_cost = calculate_next_business_cost(user_id, base_cost)

    if player_funds.get(user_id, 0) < final_cost:
        await ctx.send(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ (–Ω—É–∂–Ω–æ {final_cost})!")
        return

    # –ü–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞
    player_funds[user_id] -= final_cost
    if user_id not in player_businesses:
        player_businesses[user_id] = []
    player_businesses[user_id].append({
        "name": custom_name,
        "business_type": business_name,
        "profit": business_types[business_name]["base_profit"],
        "taxes": business_types[business_name]["taxes"],
        "service_cost": business_types[business_name]["service_cost"],
        "upgraded": False,
        "upgrade_cost": business_types[business_name]["upgrade_cost"]
    })

    save_data(FUNDS_FILE, player_funds)
    save_data(BUSINESS_FILE, player_businesses)

    await ctx.send(f"‚úÖ –ë–∏–∑–Ω–µ—Å '{custom_name}' ({business_name}) –∫—É–ø–ª–µ–Ω –∑–∞ {final_cost}!")


# –ö–æ–º–∞–Ω–¥–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å–∞—Ö
@bot.command()
async def business_info(ctx):
    business_info_message = "**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–∞—Ö:**\n"

    for business_name, business_data in business_types.items():
        business_info_message += f"üè¢ **{business_name}**\n"
        business_info_message += f"   - **–°—Ç–æ–∏–º–æ—Å—Ç—å**: {business_data['base_cost']} üí∞\n"
        business_info_message += f"   - **–ü—Ä–∏–±—ã–ª—å**: {business_data['base_profit']} üí∏\n"
        business_info_message += f"   - **–ù–∞–ª–æ–≥–∏**: {business_data['taxes']} üíµ\n"
        business_info_message += f"   - **–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è**: {business_data['service_cost']} üíº\n"
        business_info_message += f"   - **–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è**: {business_data['upgrade_cost']} üõ†\n\n"

    await ctx.send(business_info_message)


# –ö–æ–º–∞–Ω–¥–∞: –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å
@bot.command()
async def sell_business(ctx, *, business_name: str):
    user_id = str(ctx.author.id)

    if user_id not in player_businesses or not player_businesses[user_id]:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
        return

    for business in player_businesses[user_id]:
        if business["name"] == business_name:
            sale_price = int(business_types[business_name]["base_cost"] * 0.7)
            player_funds[user_id] += sale_price
            player_businesses[user_id].remove(business)

            save_data(FUNDS_FILE, player_funds)
            save_data(BUSINESS_FILE, player_businesses)

            await ctx.send(f"üí∞ {business_name} –ø—Ä–æ–¥–∞–Ω –∑–∞ {sale_price}!")
            return

    await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.")


# –ö–æ–º–∞–Ω–¥–∞: –£–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å
@bot.command()
async def upgrade_business(ctx, *, business_name: str):
    user_id = str(ctx.author.id)

    if user_id not in player_businesses:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞.")
        return

    for business in player_businesses[user_id]:
        if business["name"] == business_name:
            last_upgrade = business.get("last_upgrade", 0)
            if time.time() - last_upgrade < 86400:
                await ctx.send("‚è≥ –£–ª—É—á—à–∞—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏!")
                return

            upgrade_count = business.get("upgrade_count", 0)
            upgrade_cost = int(business_types[business_name]["upgrade_cost"] * (1.5 ** upgrade_count))
            profit_multiplier = max(1.2, 2 - (0.2 * upgrade_count))

            if player_funds.get(user_id, 0) < upgrade_cost:
                await ctx.send(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ (–Ω—É–∂–Ω–æ {upgrade_cost})!")
                return

            player_funds[user_id] -= upgrade_cost
            business["profit"] = int(business["profit"] * profit_multiplier)
            business["upgrade_count"] = upgrade_count + 1
            business["last_upgrade"] = time.time()

            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–∞–¥–∞—Ç—å
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ –≤—ã–ø–∞–¥–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                item = use_unique_item(user_id, business_name)
                await ctx.send(item)

            save_data(FUNDS_FILE, player_funds)
            save_data(BUSINESS_FILE, player_businesses)

            await ctx.send(f"üîß {business_name} —É–ª—É—á—à–µ–Ω! üìà –ù–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {business['profit']} üí∞")
            return

    await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.")


# –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö
@tasks.loop(hours=24)
async def weekend_competition():
    now = datetime.utcnow()
    if now.weekday() == 6 and now.hour == 23 and now.minute == 59:
        earnings = {}

        for user_id, businesses in player_businesses.items():
            earnings[user_id] = sum(b["profit"] for b in businesses)

        sorted_earnings = sorted(earnings.items(), key=lambda x: x[1], reverse=True)

        rewards = {
            0: {"upgrades": 3, "money": 500},
            1: {"upgrades": 1, "money": 200},
            2: {"upgrades": 0, "money": 100}
        }

        results = "**üèÜ –ò—Ç–æ–≥–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:**\n"
        for i, (user_id, total_profit) in enumerate(sorted_earnings[:3]):
            reward = rewards.get(i, {"upgrades": 0, "money": 0})
            player_funds[user_id] = player_funds.get(user_id, 0) + reward["money"]

            if user_id in player_businesses and player_businesses[user_id]:
                for _ in range(reward["upgrades"]):
                    business = random.choice(player_businesses[user_id])
                    business["profit"] = int(business["profit"] * 1.2)

            save_data(FUNDS_FILE, player_funds)
            save_data(BUSINESS_FILE, player_businesses)

            results += f"ü•á **{i + 1} –º–µ—Å—Ç–æ** ‚Äì <@{user_id}> üí∞ **{total_profit}** –ø—Ä–∏–±—ã–ª–∏. üèÜ –ü—Ä–∏–∑: {reward['money']} –¥–µ–Ω–µ–≥ –∏ {reward['upgrades']} —É–ª—É—á—à–µ–Ω–∏–π\n"

        channel = bot.get_channel(1353724972677201980)
        if channel:
            await channel.send(results)


# –ö–æ–º–∞–Ω–¥–∞: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–∑–Ω–µ—Å—ã
server_effects = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

# –ë–∏–∑–Ω–µ—Å—ã –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
business_types = {
    "–ö–∏–æ—Å–∫ —Å –µ–¥–æ–π": {"base_cost": 200, "base_profit": 20, "taxes": 10, "service_cost": 5, "upgrade_cost": 100,
                     "repair_cost": 0.2},
    "–ê–≤—Ç–æ–º–æ–π–∫–∞": {"base_cost": 300, "base_profit": 25, "taxes": 8, "service_cost": 7, "upgrade_cost": 120,
                  "repair_cost": 0.25},
    "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω": {"base_cost": 400, "base_profit": 30, "taxes": 12, "service_cost": 6, "upgrade_cost": 150,
                           "repair_cost": 0.3},
    "–û—Ñ–∏—Å IT-—É—Å–ª—É–≥": {"base_cost": 500, "base_profit": 40, "taxes": 15, "service_cost": 10, "upgrade_cost": 200,
                      "repair_cost": 0.35},
    "–§–∏—Ç–Ω–µ—Å-–∫–ª—É–±": {"base_cost": 350, "base_profit": 28, "taxes": 5, "service_cost": 8, "upgrade_cost": 140,
                    "repair_cost": 0.15}
}

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç—ã
unique_items = {
    "–ö–∏–æ—Å–∫ —Å –µ–¥–æ–π": {
        "item_name": "–§–∏—Ä–º–µ–Ω–Ω—ã–π —Ñ—É—Ä–≥–æ–Ω",
        "effect": "increase_speed",
        "duration": 86400,  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞ 10% –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
    },
    "–ê–≤—Ç–æ–º–æ–π–∫–∞": {
        "item_name": "–ü—Ä–æ–º–æ-–∫–∞—Ä—Ç—ã –¥–ª—è –ê–≤—Ç–æ–º–æ–π–∫–∏",
        "effect": "double_profit",
        "duration": 3600,  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        "description": "–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç 2x –±–æ–Ω—É—Å –∫ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞ 1 —á–∞—Å."
    },
    "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω": {
        "item_name": "–ó–æ–ª–æ—Ç–æ–π –±–∏–ª–µ—Ç",
        "effect": "increase_item_chance",
        "duration": 86400,  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ 10% –Ω–∞ 24 —á–∞—Å–∞."
    },
    "–û—Ñ–∏—Å IT-—É—Å–ª—É–≥": {
        "item_name": "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä",
        "effect": "speed_up_upgrades",
        "duration": 86400,  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        "description": "–£—Å–∫–æ—Ä—è–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ 20% –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞ 24 —á–∞—Å–∞."
    },
    "–§–∏—Ç–Ω–µ—Å-–∫–ª—É–±": {
        "item_name": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä",
        "effect": "increase_event_frequency",
        "duration": 86400,  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å–æ–≤ –Ω–∞ 10% –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
    }
}


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
def apply_effect(effect_name, duration):
    end_time = time.time() + duration
    server_effects[effect_name] = end_time
    save_data("server_effects.json", server_effects)


def check_active_effects():
    current_time = time.time()
    expired_effects = [effect for effect, end_time in server_effects.items() if end_time < current_time]

    for effect in expired_effects:
        del server_effects[effect]

    save_data("server_effects.json", server_effects)


# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
def use_unique_item(user_id, business_name):
    if business_name not in unique_items:
        return "‚ùå –¢–∞–∫–æ–π –±–∏–∑–Ω–µ—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

    item = unique_items[business_name]
    effect = item["effect"]
    duration = item["duration"]
    apply_effect(effect, duration)

    return f"üõ† –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç **{item['item_name']}** –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –≠—Ñ—Ñ–µ–∫—Ç: {item['description']}."


# –ö–æ–º–∞–Ω–¥–∞: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
@bot.command()
async def use_unique_item(ctx, business_name: str):
    user_id = str(ctx.author.id)
    message = use_unique_item(user_id, business_name)
    await ctx.send(message)


# –ö–æ–º–∞–Ω–¥–∞: –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
@bot.command()
async def active_effects(ctx):
    check_active_effects()

    if not server_effects:
        await ctx.send("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    effect_list = "\n".join(
        f"üîÆ {effect} –¥–æ {datetime.utcfromtimestamp(end_time).strftime('%Y-%m-%d %H:%M:%S')}"
        for effect, end_time in server_effects.items()
    )

    await ctx.send(f"**–ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:**\n{effect_list}")


# –ö–æ–º–∞–Ω–¥–∞: –ë–∏–∑–Ω–µ—Å—ã –∏–≥—Ä–æ–∫–∞
@bot.command()
async def businesses(ctx):
    user_id = str(ctx.author.id)

    if user_id not in player_businesses or not player_businesses[user_id]:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞.")
        return

    business_list = "\n".join(
        f"üè¢ {b['name']} | üí∞ {b['profit']} | üèó {'–£–ª—É—á—à–µ–Ω' if b['upgraded'] else '–û–±—ã—á–Ω—ã–π'}"
        for b in player_businesses[user_id]
    )
    await ctx.send(f"**–í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã:**\n{business_list}")


# –ö–æ–º–∞–Ω–¥–∞: –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
@bot.command()
async def items(ctx):
    items_list = "\n".join(
        f"üéÅ {item['item_name']} - {item['description']}"
        for item in unique_items.values()
    )
    await ctx.send(f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:**\n{items_list}")

@tasks.loop(hours=24)
async def tax_deduction():
    now = datetime.now(timezone.utc)

    if now.hour == 19 and now.minute == 0:  # –°–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤ –∫–∞–∂–¥—É—é –ø–æ–ª–Ω–æ—á—å
        for user_id, businesses in player_businesses.items():
            total_taxes = 0
            for business in businesses:
                total_taxes += business["taxes"]
                player_funds[user_id] -= business["taxes"]

            save_data(FUNDS_FILE, player_funds)

            channel = bot.get_channel(1353724972677201980)  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–∞–Ω–∞–ª
            user_mention = f"<@{user_id}>"
            if channel:
                await channel.send(f"{user_mention}, —É –≤–∞—Å —Å–ø–∏—Å–∞–Ω–æ {total_taxes} –Ω–∞–ª–æ–≥–æ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {player_funds[user_id]}.")


# –ö–æ–º–∞–Ω–¥–∞: –†–µ–º–æ–Ω—Ç –±–∏–∑–Ω–µ—Å–∞
@bot.command()
async def repair_business(ctx, *, business_name: str):
    user_id = str(ctx.author.id)

    if user_id not in player_businesses or not player_businesses[user_id]:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞.")
        return

    for business in player_businesses[user_id]:
        if business["name"] == business_name:
            repair_cost = int(business_types[business_name]["base_cost"] * business["repair_cost"])

            if player_funds.get(user_id, 0) < repair_cost:
                await ctx.send(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ (–Ω—É–∂–Ω–æ {repair_cost})!")
                return

            player_funds[user_id] -= repair_cost
            save_data(FUNDS_FILE, player_funds)

            await ctx.send(f"üîß {business_name} –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω! –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞: {repair_cost}.")
            return

    await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.")


@bot.command()
async def business_help(ctx):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    try:
        with open('business_help.txt', 'r', encoding='utf-8') as file:
            help_message = file.read()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.send(help_message)

    except FileNotFoundError:
        await ctx.send("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω.")
'''




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã
def create_deck():
    deck = [(card, suit) for suit in suits for card in card_values]
    random.shuffle(deck)
    return deck

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã –∫–∞—Ä—Ç
def calculate_hand(hand):
    total = sum(card_values[card] for card, _ in hand)
    aces = sum(1 for card, _ in hand if card == 'A')
    while total > 21 and aces:
        total -= 10
        aces -= 1
    return total

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫–∞
async def init_player_funds(ctx):
    if str(ctx.author.id) not in player_funds:
        player_funds[str(ctx.author.id)] = 1000  # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ñ–∏—à–∫–∏
        save_funds()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–≥—Ä—ã –≤ –ë–ª–µ–∫–¥–∂–µ–∫ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–≤–æ–∫

def calculate_tax(profit):
    if profit > 20000:
        tax = profit * 0.18  # 18% –Ω–∞–ª–æ–≥
        return int(tax)
    return 0


# –ë–ª—ç–∫–¥–∂–µ–∫
@bot.command(name="bj")
async def blackjack(ctx, bet: int):
    await ctx.message.delete()
    await init_player_funds(ctx)
    if bet <= 0:
        await ctx.send("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    if bet > player_funds[str(ctx.author.id)]:
        await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
        return

    player_funds[str(ctx.author.id)] -= bet  # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ —Ñ–∏—à–µ–∫
    save_funds()
    deck = create_deck()
    player_hand = [deck.pop(), deck.pop()]
    dealer_hand = [deck.pop(), deck.pop()]
    await ctx.send(f"{ctx.author.mention} –Ω–∞—á–∞–ª –∏–≥—Ä—É –≤ –ë–ª—ç–∫–¥–∂–µ–∫. –°—Ç–∞–≤–∫–∞: {bet}")
    await ctx.send(
        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join([f'{card[0]}{suits[card[1]]}' for card in player_hand])} (–°—É–º–º–∞: {calculate_hand(player_hand)})")
    await ctx.send(f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer_hand[0][0]}{suits[dealer_hand[0][1]]} –∏ —Å–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞.")

    if calculate_hand(player_hand) == 21:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
        winnings = bet * 3  # –ë–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª—ç–∫–¥–∂–µ–∫
        player_funds[str(ctx.author.id)] += winnings
        save_funds()
        tax = calculate_tax(winnings - bet)  # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å - —Å—Ç–∞–≤–∫–∞
        if tax > 0:
            player_funds[str(ctx.author.id)] -= tax
            save_funds()
            await ctx.send(f"–ù–∞–ª–æ–≥ —Å –≤—ã–∏–≥—Ä—ã—à–∞: {tax} –¥–µ–Ω–µ–≥.")
        await ctx.send(
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É {ctx.author.mention} –ë–ª—ç–∫–¥–∂–µ–∫! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –¥–µ–Ω–µ–≥! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {player_funds[str(ctx.author.id)]} –¥–µ–Ω–µ–≥.")
        return

    while calculate_hand(player_hand) < 21:
        await ctx.send("–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –µ—â–µ –∫–∞—Ä—Ç—É? –í–≤–µ–¥–∏—Ç–µ !hit –¥–ª—è –¥–æ–±–æ—Ä–∞ –∏–ª–∏ !stand –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel and m.content.lower() in ['!hit', '!stand']

        msg = await bot.wait_for('message', check=check)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
        await msg.delete()

        if msg.content.lower() == '!hit':
            player_hand.append(deck.pop())
            await ctx.send(
                f"–í—ã –≤–∑—è–ª–∏ {player_hand[-1][0]}{suits[player_hand[-1][1]]}. (–°—É–º–º–∞: {calculate_hand(player_hand)})")
            if calculate_hand(player_hand) > 21:
                await ctx.send(
                    f"{ctx.author.mention} –ø—Ä–æ–∏–≥—Ä–∞–ª! –°—É–º–º–∞ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç: {calculate_hand(player_hand)}. –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ 21!")
                return
        elif msg.content.lower() == '!stand':
            break

    while calculate_hand(dealer_hand) < 17:
        dealer_hand.append(deck.pop())

    await ctx.send(
        f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {', '.join([f'{card[0]}{suits[card[1]]}' for card in dealer_hand])}. (–°—É–º–º–∞: {calculate_hand(dealer_hand)})")

    player_total = calculate_hand(player_hand)
    dealer_total = calculate_hand(dealer_hand)

    if player_total > 21:
        await ctx.send("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ 21!")
    elif dealer_total > 21 or player_total > dealer_total:
        winnings = bet * 2
        player_funds[str(ctx.author.id)] += winnings
        save_funds()
        tax = calculate_tax(winnings - bet)  # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å - —Å—Ç–∞–≤–∫–∞
        if tax > 0:
            player_funds[str(ctx.author.id)] -= tax
            save_funds()
            await ctx.send(f"–ù–∞–ª–æ–≥ —Å –≤—ã–∏–≥—Ä—ã—à–∞: {tax} –¥–µ–Ω–µ–≥.")
        await ctx.send(
            f"{ctx.author.mention} –≤—ã–∏–≥—Ä–∞–ª! –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {winnings} –¥–µ–Ω–µ–≥. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {player_funds[str(ctx.author.id)]} –¥–µ–Ω–µ–≥.")
    elif player_total < dealer_total:
        await ctx.send(f"{ctx.author.mention} –ø—Ä–æ–∏–≥—Ä–∞–ª! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {player_funds[str(ctx.author.id)]} –¥–µ–Ω–µ–≥.")
    else:
        player_funds[str(ctx.author.id)] += bet  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É –ø—Ä–∏ –Ω–∏—á—å–µ
        save_funds()
        await ctx.send(
            f"–ù–∏—á—å—è {ctx.author.mention}! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞. –£ –≤–∞—Å {player_funds[str(ctx.author.id)]} –¥–µ–Ω–µ–≥.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ (flip)
@bot.command()
async def flip(ctx, bet: int, choice: str):
    await ctx.message.delete()
    await init_player_funds(ctx)

    if bet > player_funds[str(ctx.author.id)]:
        await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
        return
    if bet <= 0:
        await ctx.send("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    choice = choice.strip().lower()
    valid_choices = ["–æ", "–æ—Ä–µ–ª", "o", "orel", "—Ä", "—Ä–µ—à–∫–∞", "p", "reshka"]

    if choice not in valid_choices:
        await ctx.send("–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –û—Ä–µ–ª (–æ, o, –æ—Ä–µ–ª) –∏–ª–∏ –†–µ—à–∫–∞ (—Ä, p, —Ä–µ—à–∫–∞).")
        return

    choice_result = "–û—Ä–µ–ª" if choice in ["–æ", "–æ—Ä–µ–ª", "o", "orel"] else "–†–µ—à–∫–∞"

    player_funds[str(ctx.author.id)] -= bet
    save_funds()
    result = random.choice(["–æ", "—Ä", "o", "p"])
    result_str = "–û—Ä–µ–ª" if result in ["–æ", "o"] else "–†–µ—à–∫–∞"

    if result_str == choice_result:
        winnings = bet * 2
        player_funds[str(ctx.author.id)] += winnings
        save_funds()
        tax = calculate_tax(winnings - bet)  # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å - —Å—Ç–∞–≤–∫–∞
        if tax > 0:
            player_funds[str(ctx.author.id)] -= tax
            save_funds()
            await ctx.send(f"–ù–∞–ª–æ–≥ —Å –≤—ã–∏–≥—Ä—ã—à–∞: {tax} –¥–µ–Ω–µ–≥.")
        await ctx.send(
            f"{ctx.author.mention} –≤—ã–∏–≥—Ä–∞–ª! –í—ã–ø–∞–ª {result_str}. –í—ã–∏–≥—Ä—ã—à: {winnings} –¥–µ–Ω–µ–≥. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {player_funds[str(ctx.author.id)]} –¥–µ–Ω–µ–≥.")
    else:
        await ctx.send(
            f"{ctx.author.mention} –ø—Ä–æ–∏–≥—Ä–∞–ª. –í—ã–ø–∞–ª {result_str}. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {player_funds[str(ctx.author.id)]} –¥–µ–Ω–µ–≥.")


@bot.command()
async def spin(ctx, bet: int):
    await ctx.message.delete()
    await init_player_funds(ctx)
    if bet > player_funds[str(ctx.author.id)]:
        await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
        return
    if bet <= 0:
        await ctx.send("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    player_funds[str(ctx.author.id)] -= bet
    save_funds()
    symbols = ["üçí", "üçã", "üçâ", "üçá", "üçä", "üçç"]
    spin_result = [random.choice(symbols) for _ in range(3)]

    await ctx.send(f"{ctx.author.mention} –∫—Ä—É—Ç–∏—Ç —Å–ª–æ—Ç—ã... | –†–µ–∑—É–ª—å—Ç–∞—Ç: {' | '.join(spin_result)}")

    if len(set(spin_result)) == 1:  # –í—Å–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        winnings = bet * 5
        player_funds[str(ctx.author.id)] += winnings
        save_funds()
        tax = calculate_tax(winnings - bet)  # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å - —Å—Ç–∞–≤–∫–∞
        if tax > 0:
            player_funds[str(ctx.author.id)] -= tax
            save_funds()
            await ctx.send(f"–ù–∞–ª–æ–≥ —Å –≤—ã–∏–≥—Ä—ã—à–∞: {tax} –¥–µ–Ω–µ–≥.")
        await ctx.send(f"{ctx.author.mention} –≤—ã–∏–≥—Ä–∞–ª! –í—Å–µ —Å–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à: {winnings} –¥–µ–Ω–µ–≥. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {player_funds[str(ctx.author.id)]} –¥–µ–Ω–µ–≥.")
    elif len(set(spin_result)) == 2:  # –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞
        winnings = bet * 2
        player_funds[str(ctx.author.id)] += winnings
        save_funds()
        tax = calculate_tax(winnings - bet)  # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å - —Å—Ç–∞–≤–∫–∞
        if tax > 0:
            player_funds[str(ctx.author.id)] -= tax
            save_funds()
            await ctx.send(f"–ù–∞–ª–æ–≥ —Å –≤—ã–∏–≥—Ä—ã—à–∞: {tax} –¥–µ–Ω–µ–≥.")
        await ctx.send(f"{ctx.author.mention} –≤—ã–∏–≥—Ä–∞–ª! –î–≤–∞ —Å–∏–º–≤–æ–ª–∞ —Å–æ–≤–ø–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à: {winnings} –¥–µ–Ω–µ–≥. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {player_funds[str(ctx.author.id)]} –¥–µ–Ω–µ–≥.")
    else:
        await ctx.send(f"{ctx.author.mention} –ø—Ä–æ–∏–≥—Ä–∞–ª. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {player_funds[str(ctx.author.id)]} –¥–µ–Ω–µ–≥.")



AVAILABLE_JOBS = ["–ø–∏–∫–∏–Ω–≥", "–±–∞–ª–µ–Ω–∏–µ"]
UNAVAILABLE_JOBS = ["–±–∞—Ñ–µ—Ä", "–±–æ–∫—Å—ã", "–≤—Ä–∞—Ç–∫–∏"]

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –±—Ä–µ–Ω–¥–∞–º–∏
SPORT_ITEMS_WITH_BRANDS = {
    "GymBeam": ["–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –±–∞—Ç–æ–Ω—á–∏–∫", "–ö—Ä–µ–∞—Ç–∏–Ω", "BCAA", "–ö–æ–ª–ª–∞–≥–µ–Ω"],
    "BeastPink": ["–õ–æ—Å–∏–Ω—ã", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —à–æ—Ä—Ç—ã", "–®–µ–π–∫–µ—Ä"],
    "VanaVita": ["–ì–µ–π–Ω–µ—Ä", "–í–∏—Ç–∞–º–∏–Ω—ã B", "–ö–æ–ª–ª–∞–≥–µ–Ω –¥–ª—è —Å—É—Å—Ç–∞–≤–æ–≤"],
    "XBEAM": ["–†–µ–º–Ω–∏ –¥–ª—è –∂–∏–º–∞", "–§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä—ã", "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–∞—Ç–æ–Ω—á–∏–∫–∏"],
    "STRIX": ["–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –≥–µ–ª–∏", "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã"],
    "BSN": ["–ì–µ–π–Ω–µ—Ä", "–ö—Ä–µ–∞—Ç–∏–Ω –º–æ–Ω–æ–≥–∏–¥—Ä–∞—Ç", "–ë–¶–ê–ê"],
    "Muscletech": ["–ì–µ–π–Ω–µ—Ä", "–ö—Ä–µ–∞—Ç–∏–Ω –º–æ–Ω–æ–≥–∏–¥—Ä–∞—Ç", "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–∞—Ç–æ–Ω—á–∏–∫–∏"],
    "NOW Foods": ["–û–º–µ–≥–∞-3", "–í–∏—Ç–∞–º–∏–Ω C", "–õ-–∫–∞—Ä–Ω–∏—Ç–∏–Ω"],
    "The Protein Works": ["–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å", "–®–µ–π–∫–µ—Ä", "–ì–µ–π–Ω–µ—Ä"],
    "Universal": ["–ì–µ–π–Ω–µ—Ä", "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å", "–ö—Ä–µ–∞—Ç–∏–Ω"]
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
ORDERS = {}
ORDER_MESSAGES = {}

ORDERS_COMPLETED_FILE = "orders_completed.json"

def load_orders_completed():
    try:
        with open(ORDERS_COMPLETED_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_orders_completed():
    with open(ORDERS_COMPLETED_FILE, "w", encoding="utf-8") as file:
        json.dump(USER_ORDERS_COMPLETED, file, indent=4)

USER_ORDERS_COMPLETED = load_orders_completed()

PRIEMER_FILE = "priemer_data.json"

def generate_baling_order():
    num_items = random.randint(1, 30)
    items = []
    for _ in range(num_items):
        brand = random.choice(list(SPORT_ITEMS_WITH_BRANDS.keys()))
        item = random.choice(SPORT_ITEMS_WITH_BRANDS[brand])
        items.append(f"{brand} - {item}")
    return items

class PackingView(View):
    def __init__(self, user_id: int, order_size: int):
        super().__init__()
        self.user_id = user_id
        self.order_size = order_size
        self.remaining_items = order_size
        self.selected_box = None

        self.exit_button = Button(label="–í—ã–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã", style=nextcord.ButtonStyle.red, disabled=True)
        self.exit_button.callback = self.exit_job

        box_sizes = {
            "A": range(1, 7),
            "B": range(7, 13),
            "C": range(13, 19),
            "D": range(19, 25),
            "E": range(25, 31),
        }

        for box in box_sizes.keys():
            button = Button(label=f"–ö–æ—Ä–æ–±–∫–∞ {box}", style=nextcord.ButtonStyle.blurple)
            button.callback = self.create_box_callback(box)
            self.add_item(button)

        self.collect_button = Button(label="–°–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", style=nextcord.ButtonStyle.green, disabled=True)
        self.collect_button.callback = self.collect_item
        self.add_item(self.collect_button)
        self.add_item(self.exit_button)

    def create_box_callback(self, box: str):
        async def callback(interaction: nextcord.Interaction):
            await self.select_box(interaction, box)
        return callback

    async def select_box(self, interaction: nextcord.Interaction, box: str):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        box_sizes = {
            "A": range(1, 7),
            "B": range(7, 13),
            "C": range(13, 19),
            "D": range(19, 25),
            "E": range(25, 31),
        }

        if self.order_size not in box_sizes[box]:
            await interaction.response.send_message(f"–≠—Ç–∞ –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä.", ephemeral=True)
            return

        self.selected_box = box
        self.collect_button.disabled = False
        await interaction.message.edit(content=f"{interaction.user.mention}, –≤—ã–±—Ä–∞–Ω–∞ –∫–æ—Ä–æ–±–∫–∞ {box}. –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å: {self.remaining_items} —Ç–æ–≤–∞—Ä–æ–≤.", view=self)

    async def collect_item(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        if self.remaining_items > 0:
            self.remaining_items -= random.randint(1, min(5, self.remaining_items))  # –°–æ–±–∏—Ä–∞–µ–º 1-5 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Ä–∞–∑
            if self.remaining_items > 0:
                await interaction.message.edit(content=f"{interaction.user.mention}, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å: {self.remaining_items} —Ç–æ–≤–∞—Ä–æ–≤.", view=self)
            else:
                await self.complete_order(interaction)

    async def complete_order(self, interaction: nextcord.Interaction):
        earnings = random.randint(50, 10000)
        player_funds[str(self.user_id)] = player_funds.get(str(self.user_id), 0) + earnings
        save_funds()

        self.clear_items()
        self.exit_button.disabled = False
        new_order_button = Button(label="–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", style=nextcord.ButtonStyle.green)
        new_order_button.callback = self.start_new_order
        self.add_item(new_order_button)
        self.add_item(self.exit_button)

        await interaction.message.edit(content=f"{interaction.user.mention}, –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings} –¥–µ–Ω–µ–≥.\n–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑?", view=self)

    async def start_new_order(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        new_order_size = random.randint(1, 30)
        new_view = PackingView(self.user_id, new_order_size)
        await interaction.message.edit(content=f"{interaction.user.mention}, –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ {new_order_size} —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É.", view=new_view)

    async def exit_job(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        await interaction.message.edit(content=f"{interaction.user.mention}, –≤—ã –≤—ã—à–ª–∏ —Å —Ä–∞–±–æ—Ç—ã.", view=None)


class OrderProcessingView(View):
    def __init__(self, user_id: int):
        super().__init__()
        self.user_id = user_id
        self.pick_button = Button(label="–°–æ–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", style=nextcord.ButtonStyle.green)
        self.pick_button.callback = self.collect_items
        self.add_item(self.pick_button)

    async def collect_items(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        user_id = str(interaction.user.id)
        if user_id not in ORDERS:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!", ephemeral=True)
            return

        items = ORDERS[user_id]

        num_to_collect = min(random.randint(1, 5), len(items))
        collected_items = items[:num_to_collect]
        ORDERS[user_id] = items[num_to_collect:]

        collected_list = "\n".join([f"‚úÖ {item['item']}" for item in collected_items])
        remaining_list = "\n".join([f"{i+1}. {item['item']}" for i, item in enumerate(ORDERS[user_id])])

        if ORDERS[user_id]:
            await interaction.message.edit(content=f"{interaction.user.mention}, –≤—ã —Å–æ–±—Ä–∞–ª–∏:\n{collected_list}\n\n–û—Å—Ç–∞–ª–æ—Å—å:\n{remaining_list}")
        else:
            await self.complete_order(interaction)

    async def complete_order(self, interaction: nextcord.Interaction):
        user_id = str(interaction.user.id)
        earnings = random.randint(50, 100000)

        player_funds[user_id] = player_funds.get(user_id, 0) + earnings
        save_funds()
        del ORDERS[user_id]

        self.clear_items()
        exit_button = Button(label="–í—ã–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã", style=nextcord.ButtonStyle.red)
        exit_button.callback = self.exit_job
        self.add_item(exit_button)

        new_order_button = Button(label="–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", style=nextcord.ButtonStyle.green)
        new_order_button.callback = self.start_new_order
        self.add_item(new_order_button)

        await interaction.message.edit(content=f"{interaction.user.mention}, –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings} –¥–µ–Ω–µ–≥.", view=self)

    async def exit_job(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return
        await interaction.message.edit(content=f"{interaction.user.mention}, –≤—ã –≤—ã—à–ª–∏ —Å —Ä–∞–±–æ—Ç—ã.", view=None)

    async def start_new_order(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        user_id = str(interaction.user.id)
        order_size = random.randint(1, 30)
        ORDERS[user_id] = [{"item": random.choice(random.choice(list(SPORT_ITEMS_WITH_BRANDS.values())))} for _ in range(order_size)]

        view = PackingView(user_id, order_size)
        await interaction.channel.send(f"{interaction.user.mention}, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–∑ {order_size} —Ç–æ–≤–∞—Ä–æ–≤.", view=view)

class BalingView(View):
    def __init__(self, user_id: int):
        super().__init__()
        self.user_id = user_id
        self.box_selected = None
        self.items_collected = []
        self.box_button = Button(label="–í—ã–±—Ä–∞—Ç—å –∫–æ—Ä–æ–±–∫—É", style=nextcord.ButtonStyle.blurple)
        self.box_button.callback = self.select_box
        self.collect_button = Button(label="–°–æ–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑", style=nextcord.ButtonStyle.green, disabled=True)
        self.collect_button.callback = self.collect_items
        self.send_button = Button(label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä–æ–±–∫—É", style=nextcord.ButtonStyle.red, disabled=True)
        self.send_button.callback = self.send_box
        self.add_item(self.box_button)
        self.add_item(self.collect_button)
        self.add_item(self.send_button)

    async def select_box(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        user_id = str(interaction.user.id)
        order_size = len(ORDERS[user_id])
        if order_size <= 6:
            self.box_selected = "A"
        elif order_size <= 12:
            self.box_selected = "B"
        elif order_size <= 18:
            self.box_selected = "C"
        elif order_size <= 24:
            self.box_selected = "D"
        else:
            self.box_selected = "E"

        self.box_button.disabled = True
        self.collect_button.disabled = False
        await interaction.message.edit(content=f"{interaction.user.mention}, –≤—ã–±—Ä–∞–Ω–∞ –∫–æ—Ä–æ–±–∫–∞ {self.box_selected}. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å–±–æ—Ä–∫—É –∑–∞–∫–∞–∑–∞!", view=self)

    async def collect_items(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        user_id = str(interaction.user.id)
        order_items = ORDERS[user_id]

        if not order_items:
            self.collect_button.disabled = True
            self.send_button.disabled = False
            await interaction.message.edit(content=f"{interaction.user.mention}, –∑–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä–æ–±–∫—É.", view=self)
            return

        num_to_collect = min(random.randint(1, 5), len(order_items))
        collected = order_items[:num_to_collect]
        self.items_collected.extend(collected)
        del ORDERS[user_id][:num_to_collect]

        remaining = len(ORDERS[user_id])
        await interaction.message.edit(content=f"{interaction.user.mention}, —Å–æ–±—Ä–∞–Ω–æ {len(self.items_collected)} —Ç–æ–≤–∞—Ä–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å {remaining}.", view=self)

    async def send_box(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        user_id = str(interaction.user.id)
        if user_id not in priemer_data:
            priemer_data[user_id] = 0

        earnings = random.randint(50, 100000)
        player_funds[user_id] = player_funds.get(user_id, 0) + earnings
        save_funds()

        del ORDERS[user_id]
        del ORDER_MESSAGES[user_id]

        await interaction.message.edit(content=f"{interaction.user.mention}, –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings} –¥–µ–Ω–µ–≥.", view=None)



def load_priemer():
    try:
        with open(PRIEMER_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_priemer():
    with open(PRIEMER_FILE, "w", encoding="utf-8") as file:
        json.dump(priemer_data, file, indent=4)

priemer_data = load_priemer()

order_history = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å

async def update_priemer():
    decay_counter = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞

    while True:
        await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        decay_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏

        for user_id in priemer_data:
            orders = order_history.get(user_id, [])
            if orders:
                avg_orders_per_min = len(orders)
                avg_positions_per_order = sum(orders) / avg_orders_per_min
                increase = (avg_orders_per_min * avg_positions_per_order) / 10
                priemer_data[user_id] = int(min(150, priemer_data[user_id] + increase))
            else:
                if decay_counter >= 60:  # –£–º–µ–Ω—å—à–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 60 –º–∏–Ω—É—Ç
                    priemer_data[user_id] = int(max(0, priemer_data[user_id] - 1))

        if decay_counter >= 60:
            decay_counter = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è

        save_priemer()
        order_history.clear()

loop = asyncio.get_event_loop()
loop.create_task(update_priemer())

@bot.command()
async def priemer(ctx):
    await ctx.message.delete()
    user_id = str(ctx.author.id)
    if user_id in priemer_data:
        await ctx.send(f"Priemer {ctx.author.mention}: {priemer_data[user_id]}")
    else:
        await ctx.send("–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å!")

def generate_order():
    num_positions = random.randint(1, 30)
    positions = []
    for _ in range(num_positions):
        brand = random.choice(list(SPORT_ITEMS_WITH_BRANDS.keys()))
        item = random.choice(SPORT_ITEMS_WITH_BRANDS[brand])
        location = f"3{random.choice('BC')}{random.randint(1, 56)}{random.choice('ABCDEFGHJ')}{random.randint(1, 4)}"
        positions.append({"location": location, "item": f"{brand} - {item}", "status": "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"})
    return positions

class PickingView(View):
    def __init__(self, user_id: int):
        super().__init__()
        self.user_id = user_id
        self.pick_button = Button(label="Skenovat' produkt", style=nextcord.ButtonStyle.green)
        self.pick_button.callback = self.pick_positions
        self.exit_button = Button(label="–í—ã–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã", style=nextcord.ButtonStyle.red)
        self.exit_button.callback = self.exit_job
        self.exit_button.disabled = True  # –°–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã" –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        self.add_item(self.pick_button)
        self.add_item(self.exit_button)
        self.disabled = False  # –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏

    async def pick_positions(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return
        
        user_id = str(interaction.user.id)

        if user_id not in ORDERS:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!", ephemeral=True)
            return

        if self.disabled:
            await interaction.response.send_message("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!", ephemeral=True)
            return
        
        positions = [p for p in ORDERS[user_id] if p["status"] == "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"]
        
        if not positions:
            await self.finish_order(interaction)
            return

        if random.random() < 0.03:
            self.pick_button.disabled = True
            self.disabled = True
            time = random.randint(60, 300)
            for remaining in range(time, 0, -1):
                await interaction.message.edit(content=f"{interaction.user.mention}, —É –≤–∞—Å –æ—à–∏–±–∫–∞ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ, –∂–¥–µ–º —Å–∞–ø–æ—Ä—Ç–∞. –û–∂–∏–¥–∞–Ω–∏–µ: {remaining} —Å–µ–∫.", view=self)
                await asyncio.sleep(1)
            self.pick_button.disabled = False
            self.disabled = False
            await interaction.message.edit(content=f"{interaction.user.mention}, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–∏–∫–∏–Ω–≥.", view=self)
            return

        num_to_pick = random.randint(1, 5)
        for _ in range(min(num_to_pick, len(positions))):
            positions[0]["status"] = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            positions.pop(0)

        incomplete = []
        completed = []

        for i, p in enumerate(ORDERS[user_id]):
            if p["status"] == "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
                incomplete.append(f"{i+1}. {p['location']} ({p['item']})")
            else:
                completed.append(f"‚úÖ~~{i+1}. {p['location']} ({p['item']})~~‚úÖ")

        pickup_list = "\n".join(completed) + "\n" + "\n" + "\n".join(incomplete)

        await interaction.message.edit(content=f"{interaction.user.mention}, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∏–∫–∞–ø –ª–∏—Å—Ç:\n{pickup_list}")

        if not positions:
            await self.switch_to_finish_button(interaction)
        else:
            delay = random.randint(1, 5)
            self.pick_button.disabled = True
            await interaction.message.edit(view=self)
            await asyncio.sleep(delay)
            self.pick_button.disabled = False
            await interaction.message.edit(view=self)

    async def switch_to_finish_button(self, interaction: nextcord.Interaction):
        """–ó–∞–º–µ–Ω—è–µ—Ç –∫–Ω–æ–ø–∫—É '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç' –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –≤—ã—Ö–æ–¥–∞ —Å —Ä–∞–±–æ—Ç—ã."""
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        self.clear_items()
        finish_button = Button(label="Odoslat' objednavku", style=nextcord.ButtonStyle.blurple)
        finish_button.callback = self.finish_order
        self.add_item(finish_button)
        self.add_item(self.exit_button)  # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã"
        await interaction.message.edit(view=self)

    async def finish_order(self, interaction: nextcord.Interaction):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        user_id = str(interaction.user.id)
        num_positions = len(ORDERS[user_id])
        priemer_data[user_id] = priemer_data.get(user_id, 0)

        if user_id not in order_history:
            order_history[user_id] = []
        order_history[user_id].append(num_positions)

        if priemer_data[user_id] < 60:
            earnings = random.randint(50, 10000)
        elif priemer_data[user_id] < 80:
            earnings = random.randint(10000, 20000)
        elif priemer_data[user_id] < 120:
            earnings = random.randint(20000, 50000)
        else:
            earnings = random.randint(50000, 100000)

        tax = 0.07 if earnings <= 47000 else 0.19
        tax_amount = int(earnings * tax)
        earnings_after_tax = earnings - tax_amount

        player_funds[user_id] = player_funds.get(user_id, 0) + earnings_after_tax
        save_funds()
        del ORDERS[user_id]
        del ORDER_MESSAGES[user_id]
        await interaction.message.edit(
            content=f"{interaction.user.mention}, –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings} –¥–µ–Ω–µ–≥. –ù–∞–ª–æ–≥: {tax_amount}. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {earnings_after_tax}. –í–∞—à priemer: {priemer_data[user_id]}",
            view=None)
        self.exit_button.disabled = False
        await self.show_new_order_button(interaction)
    
    async def start_new_order(self, interaction: nextcord.Interaction):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑."""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–∞–∑
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        user_id = str(interaction.user.id)
        ORDERS[user_id] = generate_order()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑

        pickup_list = "\n".join([ 
            f"{i+1}. {order['location']} ({order['item']})"
            for i, order in enumerate(ORDERS[user_id])
        ])

        view = PickingView(user_id)

        message = await interaction.channel.send(
            f"{interaction.user.mention}, –≤—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ {len(ORDERS[user_id])} –ø–æ–∑–∏—Ü–∏–π. –í–∞—à priemer: {priemer_data[user_id]}\n\n**–ü–∏–∫–∞–ø –ª–∏—Å—Ç:**\n{pickup_list}",
            view=view
        )

        ORDER_MESSAGES[user_id] = message.id
        await interaction.message.delete() 
    
    async def show_new_order_button(self, interaction: nextcord.Interaction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ."""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–∞–∑
        if str(interaction.user.id) != self.user_id:
            return

        self.clear_items()
        new_order_button = Button(label="–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", style=nextcord.ButtonStyle.green)
        new_order_button.callback = self.start_new_order  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        self.add_item(new_order_button)
        self.add_item(self.exit_button)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã"
        await interaction.message.edit(view=self)

    
    async def show_exit_button(self, interaction: nextcord.Interaction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã" –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
        if str(interaction.user.id) != self.user_id:
            return

        self.clear_items()
        self.add_item(self.exit_button)
        await interaction.message.edit(view=self)

    async def exit_job(self, interaction: nextcord.Interaction):
        """–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –≤—ã—Ö–æ–¥–µ."""
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!", ephemeral=True)
            return

        user_id = str(interaction.user.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in ORDERS:
            del ORDERS[user_id]  # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            del ORDER_MESSAGES[user_id]  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        await interaction.message.edit(content=f"{interaction.user.mention}, –≤—ã –≤—ã—à–ª–∏ —Å —Ä–∞–±–æ—Ç—ã.", view=None)


@bot.command(name="gb")
async def start_job(ctx):
    await ctx.message.delete()
    job = random.choice(["–ø–∏–∫–∏–Ω–≥", "–±–∞–ª–µ–Ω–∏–µ"])

    if job not in ["–ø–∏–∫–∏–Ω–≥", "–±–∞–ª–µ–Ω–∏–µ"]:
        await ctx.send(f"{ctx.author.mention}, —Ç–∞–∫–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    user_id = str(ctx.author.id)

    if job == "–ø–∏–∫–∏–Ω–≥":
        ORDERS[user_id] = generate_order()
        priemer_data[user_id] = priemer_data.get(user_id, 0)
        save_priemer()

        pickup_list = "\n".join([f"{i+1}. {order['location']} ({order['item']})" for i, order in enumerate(ORDERS[user_id])])
        view = PickingView(user_id)

        message = await ctx.send(
            f"{ctx.author.mention}, –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –ø–∏–∫–∏–Ω–≥–µ. –í–∞–º –≤—ã–¥–∞–Ω –∑–∞–∫–∞–∑ –∏–∑ {len(ORDERS[user_id])} –ø–æ–∑–∏—Ü–∏–π. –í–∞—à priemer: {priemer_data[user_id]}\n\n**–ü–∏–∫–∞–ø –ª–∏—Å—Ç:**\n{pickup_list}",
            view=view
        )
        ORDER_MESSAGES[user_id] = message.id

    elif job == "–±–∞–ª–µ–Ω–∏–µ":
        order_size = random.randint(1, 30)
        ORDERS[user_id] = [{"item": random.choice(random.choice(list(SPORT_ITEMS_WITH_BRANDS.values())))} for _ in range(order_size)]

        view = PackingView(user_id, order_size)
        await ctx.send(f"{ctx.author.mention}, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–∑ {order_size} —Ç–æ–≤–∞—Ä–æ–≤.", view=view) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏—à–µ–∫

@bot.command(name="pay")
async def pay(ctx, member: nextcord.Member, amount: int):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await ctx.message.delete()
    sender_id = str(ctx.author.id)
    receiver_id = str(member.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã
    if amount <= 0:
        await ctx.send(f"{ctx.author.mention}, —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥
    if player_funds.get(sender_id, 0) < amount:
        await ctx.send(f"{ctx.author.mention}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
        return

    # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    player_funds[sender_id] -= amount
    player_funds[receiver_id] = player_funds.get(receiver_id, 0) + amount

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_funds()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    await ctx.send(f"{ctx.author.mention} –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} –¥–µ–Ω–µ–≥ {member.mention}!")


LOANS_FILE = "player_loans.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
def load_loans():
    try:
        with open(LOANS_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
def save_loans():
    with open(LOANS_FILE, "w") as f:
        json.dump(player_loans, f)


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
player_loans = load_loans()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
async def get_user_age_on_server(ctx, user_id):
    try:
        member = await ctx.guild.fetch_member(user_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        return None

    if member is None:
        return None

    join_date = member.joined_at
    if not join_date:
        return None

    join_date = join_date.astimezone(pytz.utc)
    today = datetime.now(pytz.utc)
    age_on_server = (today - join_date).days
    return age_on_server

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞
def get_max_loan_amount(age_on_server):
    if age_on_server < 30:
        return 0
    elif age_on_server < 60:
        return 100000
    elif age_on_server < 90:
        return 300000
    elif age_on_server < 120:
        return 500000
    else:
        return 1000000

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
def calculate_daily_payment(loan_amount, loan_term, interest_rate):
    total_amount_to_pay = loan_amount * (1 + interest_rate)
    daily_payment = total_amount_to_pay / loan_term
    return int(daily_payment)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏
def get_interest_rate(age_on_server):
    if age_on_server > 120:
        return 0.15
    return 0.20

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
@bot.command()
async def applyloan(ctx, loan_amount: int, loan_term: int):
    await ctx.message.delete()
    user_id = str(ctx.author.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
    if user_id in player_loans and player_loans[user_id]:
        await ctx.send(f"{ctx.author.mention}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç. –ü–æ–≥–∞—Å–∏—Ç–µ –µ–≥–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –±—Ä–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    if loan_term > 7:
        await ctx.send("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ ‚Äî 7 –¥–Ω–µ–π.")
        return

    age_on_server = await get_user_age_on_server(ctx, ctx.author.id)
    if age_on_server is None:
        await ctx.send(f"{ctx.author.mention}, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    max_loan = get_max_loan_amount(age_on_server)
    if loan_amount > max_loan:
        await ctx.send(f"–í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç –Ω–µ –±–æ–ª–µ–µ {max_loan}.")
        return

    interest_rate = get_interest_rate(age_on_server)
    daily_payment = calculate_daily_payment(loan_amount, loan_term, interest_rate)
    due_date = (datetime.now() + timedelta(days=loan_term)).strftime("%Y-%m-%d")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç
    player_loans[user_id] = [{
        "loan_amount": loan_amount,
        "interest_rate": interest_rate,
        "daily_payment": daily_payment,
        "loan_term": loan_term,
        "due_date": due_date,
        "paid_amount": 0
    }]

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    player_funds[user_id] = player_funds.get(user_id, 0) + loan_amount

    save_funds()
    save_loans()

    await ctx.send(
        f"{ctx.author.mention} –≤–∑—è–ª –∫—Ä–µ–¥–∏—Ç –Ω–∞ {loan_amount} –¥–µ–Ω–µ–≥. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {daily_payment} –¥–µ–Ω–µ–≥.\n"
        f"–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {due_date}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {player_funds[user_id]} –¥–µ–Ω–µ–≥."
    )





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞
@bot.command()
async def calculatecredit(ctx, loan_amount: int, loan_term: int):
    await ctx.message.delete()
    age_on_server = await get_user_age_on_server(ctx, ctx.author.id)
    interest_rate = get_interest_rate(age_on_server)
    daily_payment = calculate_daily_payment(loan_amount, loan_term, interest_rate)

    await ctx.send(f"–ö—Ä–µ–¥–∏—Ç –Ω–∞ —Å—É–º–º—É {loan_amount} –Ω–∞ {loan_term} –¥–Ω–µ–π.\n"
                   f"–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {interest_rate * 100}%.\n"
                   f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {daily_payment:.2f}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
@tasks.loop(minutes=60)
async def send_loan_warnings():
    for user_id, loans in player_loans.items():
        for loan in loans:
            due_date = datetime.strptime(loan['due_date'], "%Y-%m-%d")
            if due_date - datetime.now() == timedelta(days=3):
                user = bot.get_user(int(user_id))
                if user:
                    await user.send(f"–í–∞—à –∫—Ä–µ–¥–∏—Ç —Å—Ä–æ–∫–æ–º –¥–æ {loan['due_date']} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è.")
            elif due_date - datetime.now() == timedelta(days=1):
                user = bot.get_user(int(user_id))
                if user:
                    await user.send(f"–í–∞—à –∫—Ä–µ–¥–∏—Ç —Å—Ä–æ–∫–æ–º –¥–æ {loan['due_date']} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.")
            elif due_date - datetime.now() == timedelta(hours=12):
                user = bot.get_user(int(user_id))
                if user:
                    await user.send(f"–í–∞—à –∫—Ä–µ–¥–∏—Ç —Å—Ä–æ–∫–æ–º –¥–æ {loan['due_date']} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤.")
            elif due_date - datetime.now() == timedelta(hours=1):
                user = bot.get_user(int(user_id))
                if user:
                    await user.send(f"–í–∞—à –∫—Ä–µ–¥–∏—Ç —Å—Ä–æ–∫–æ–º –¥–æ {loan['due_date']} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 —á–∞—Å.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
@bot.command()
async def checkloan(ctx):
    await ctx.message.delete()
    user_id = str(ctx.author.id)

    if user_id not in player_loans or not player_loans[user_id]:
        await ctx.send(f"{ctx.author.mention}, —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞.")
        return

    loan = player_loans[user_id][0]  # –ë–µ—Ä–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
    loan_amount = loan['loan_amount']
    interest_rate = loan['interest_rate']

    total_debt = int(loan_amount * (1 + interest_rate))  # –û–±—â–∞—è —Å—É–º–º–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    paid_amount = loan.get('paid_amount', 0)
    remaining_amount = total_debt - paid_amount

    due_date = datetime.strptime(loan['due_date'], "%Y-%m-%d")
    days_left = (due_date - datetime.now()).days

    if datetime.now() > due_date:
        new_due_date = due_date + timedelta(days=2)
        loan['due_date'] = new_due_date.strftime("%Y-%m-%d")
        loan['loan_amount'] *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥ –≤ 2 —Ä–∞–∑–∞
        save_loans()

        await ctx.send(
            f"‚ö†Ô∏è {ctx.author.mention}, —É –≤–∞—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç! –î–æ–ª–≥ —É–¥–≤–æ–µ–Ω. –ù–æ–≤–∞—è –¥–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {new_due_date.strftime('%Y-%m-%d')}."
        )
        return

    await ctx.send(
        f"üí∞ –ö—Ä–µ–¥–∏—Ç {ctx.author.mention}:\n"
        f"üìå **–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:** {loan_amount} –¥–µ–Ω–µ–≥\n"
        f"üìå **–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞:** {interest_rate * 100}%\n"
        f"üìå **–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é:** {total_debt} –¥–µ–Ω–µ–≥\n"
        f"üìå **–ü–æ–≥–∞—à–µ–Ω–æ:** {paid_amount} –¥–µ–Ω–µ–≥\n"
        f"üìå **–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–≥–∞—Å–∏—Ç—å:** {remaining_amount} –¥–µ–Ω–µ–≥\n"
        f"üìå **–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:** {days_left} –¥–Ω–µ–π\n"
        f"üìå **–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è:** {loan['due_date']}"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
@bot.command()
async def payloan(ctx, payment_amount: int):
    await ctx.message.delete()
    user_id = str(ctx.author.id)

    if user_id not in player_loans or not player_loans[user_id]:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞.")
        return

    if user_id not in player_funds or player_funds[user_id] < payment_amount:
        await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç–∞.")
        return

    loan = player_loans[user_id][0]
    paid_amount = loan.get('paid_amount', 0)
    remaining_balance = (loan['loan_amount'] * (1 + loan['interest_rate'])) - paid_amount

    if payment_amount > remaining_balance:
        payment_amount = remaining_balance  # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ–ø–ª–∞—Ç–∏—Ç—å

    # –í—ã—á–∏—Ç–∞–µ–º –¥–µ–Ω—å–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    player_funds[user_id] -= payment_amount
    loan["paid_amount"] += payment_amount

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–≥–∞—à–µ–Ω –ª–∏ –∫—Ä–µ–¥–∏—Ç
    if loan["paid_amount"] >= loan["loan_amount"] * (1 + loan["interest_rate"]):
        player_loans[user_id].remove(loan)
        await ctx.send(f"–í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—Å–∏–ª–∏ –∫—Ä–µ–¥–∏—Ç. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {player_funds[user_id]} –¥–µ–Ω–µ–≥.")
    else:
        await ctx.send(
            f"–í—ã –≤–Ω–µ—Å–ª–∏ {payment_amount} –¥–µ–Ω–µ–≥.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–≥–∞—Å–∏—Ç—å: {remaining_balance - payment_amount} –¥–µ–Ω–µ–≥.\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {player_funds[user_id]} –¥–µ–Ω–µ–≥."
        )

    save_funds()
    save_loans()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
@bot.command()
async def handleunpaidloan(ctx):
    await ctx.message.delete()
    user_id = str(ctx.author.id)

    if user_id not in player_loans or not player_loans[user_id]:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞.")
        return

    loan = player_loans[user_id][0]
    loan_amount = loan['loan_amount']

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–≥–∞—à–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è, —à—Ç—Ä–∞—Ñ—É–µ–º
    if datetime.now() > datetime.strptime(loan['due_date'], "%Y-%m-%d"):
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω—è
        if (datetime.now() - datetime.strptime(loan['due_date'], "%Y-%m-%d")).days > 2:
            player_funds[user_id]['balance'] -= loan_amount * 10
            player_loans[user_id].remove(loan)
            save_funds()
            save_loans()
            await ctx.send(f"–í—ã –Ω–µ –ø–æ–≥–∞—Å–∏–ª–∏ –∫—Ä–µ–¥–∏—Ç –≤–æ–≤—Ä–µ–º—è. –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {loan_amount * 10}.")
        else:
            await ctx.send(
                f"–£ –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞, –¥–æ–ª–≥ —Å–µ–π—á–∞—Å –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ. –î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {loan['due_date']}.")
    else:
        await ctx.send("–í–∞—à –∫—Ä–µ–¥–∏—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
@bot.command(name="moneyhelp")
async def moneyhelp(ctx):
    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        with open("moneyhelp.txt", "r", encoding="utf-8") as file:
            help_text = file.read()
    except FileNotFoundError:
        help_text = "–§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω."

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç
    await ctx.send(help_text)


tax_channel_id = 1351953330791776421   # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–∞–Ω–∞–ª ID


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ª–æ–≥–∞
# async def apply_daily_tax():
#     # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
#     tax_channel = bot.get_channel(tax_channel_id)
#
#     if not tax_channel:
#         print("–ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#         return
#
#     # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥
#     for user_id, balance in player_funds.items():
#         # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—å—à–µ 37981 –¥–µ–Ω–µ–≥, –Ω–∞–ª–æ–≥ 19%
#         if balance < 37981:
#             tax = int(balance * 0.19)
#         else:
#             # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 37981, –Ω–∞–ª–æ–≥ 25%
#             tax = int(balance * 0.25)
#
#         # –°–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥ —Å –±–∞–ª–∞–Ω—Å–∞
#         player_funds[user_id] -= tax
#         save_funds()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
#     #
#     #     # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
#     #     user = await bot.fetch_user(user_id)
#     #
#     #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–ª–æ–≥–∞ –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª
#     #     await tax_channel.send(
#     #         f"{user.mention}, —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª —Å–ø–∏—Å–∞–Ω –Ω–∞–ª–æ–≥ –≤ —Ä–∞–∑–º–µ—Ä–µ {tax} –¥–µ–Ω–µ–≥. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {player_funds[user_id]}.")
#     #
#     # print("–ù–∞–ª–æ–≥–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã.")


# # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00
# scheduler = AsyncIOScheduler()
# scheduler.add_job(apply_daily_tax,
#                   CronTrigger(hour=20, minute=0))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CronTrigger –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ 20:00

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç asyncio
loop = asyncio.get_event_loop()

@bot.command(name="money")
async def check_funds(ctx):
    await ctx.message.delete()
    await init_player_funds(ctx)
    await ctx.send(f"{ctx.author.mention}, —É –≤–∞—Å {player_funds[str(ctx.author.id)]} –¥–µ–Ω–µ–≥.")
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

@bot.command(name="userinfo")
async def user_info(ctx, member: nextcord.Member = None):
    await ctx.message.delete()
    if member is None:
        member = ctx.author

    embed = nextcord.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {member}", color=nextcord.Color.blue())
    embed.add_field(name="–ò–º—è", value=member.name, inline=True)
    embed.add_field(name="ID", value=member.id, inline=True)
    embed.add_field(name="–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", value=member.joined_at.strftime("%d/%m/%Y %H:%M"), inline=True)
    embed.add_field(name="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", value=member.created_at.strftime("%d/%m/%Y %H:%M"), inline=True)
    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=member.status, inline=True)
    embed.set_thumbnail(url=member.avatar.url)

    await ctx.send(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
@bot.command(name="serverinfo")
async def server_info(ctx):
    await ctx.message.delete()
    server = ctx.guild
    embed = nextcord.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {server.name}", color=nextcord.Color.green())
    embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞", value=server.name, inline=True)
    embed.add_field(name="ID —Å–µ—Ä–≤–µ—Ä–∞", value=server.id, inline=True)
    embed.add_field(name="–°–æ–∑–¥–∞–Ω", value=server.created_at.strftime("%d/%m/%Y %H:%M"), inline=True)
    embed.add_field(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=server.member_count, inline=True)
    embed.set_thumbnail(url=server.icon.url)

    await ctx.send(embed=embed)


class MyHelpCommand(commands.HelpCommand):
    async def send_bot_help(self, mapping):
        try:
            with open("help.txt", "r", encoding="utf-8") as file:
                help_text = file.read()
        except FileNotFoundError:
            help_text = "–§–∞–π–ª –ø–æ–º–æ—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

        ctx = self.context
        user = ctx.author  # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π !help
        try:
            await ctx.message.delete()
        except nextcord.Forbidden:
            print("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        except AttributeError:
            print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã–∑–≤–∞–Ω–æ –Ω–µ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç).")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å –≤ –õ–°
        try:
            await user.send(help_text)
        except nextcord.Forbidden:
            await ctx.send(
                f"{user.mention}, —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°. –†–∞–∑—Ä–µ—à–∏ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.")



@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    send_loan_warnings.start()
    # scheduler.start()

@bot.event
async def on_member_join(member):
    print(f"[JOIN] {member.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!")
    try:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ help.txt
        try:
            with open("help.txt", "r", encoding="utf-8") as file:
                help_text = file.read()
        except FileNotFoundError:
            help_text = "–§–∞–π–ª –ø–æ–º–æ—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è + help –≤ –õ–°
        await member.send(f"–ü—Ä–∏–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ BAZARCIK_PM, {member.name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä BAZARCIK_PM!\n\n{help_text}")

    except nextcord.Forbidden:
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name}.')


# channel: category

AUTO_CHANNELS = {
    1402746822191218749: 1402733375986466816,
    1402746847713296526: 1402732822375960676,
    1402746870773584062: 1402732572206960661,
    1314708636269936670: 1402748456883454097
}

@bot.event
async def on_voice_state_update(member, before, after):
    # === –°–û–ó–î–ê–ù–ò–ï –ö–ê–ù–ê–õ–ê ===
    if after.channel and after.channel.id in AUTO_CHANNELS:
        guild = member.guild
        auto_channel = after.channel
        category_id = AUTO_CHANNELS[auto_channel.id]
        category = guild.get_channel(category_id)

        # print(f"[INFO] {member} –∑–∞—à—ë–ª –≤ –∞–≤—Ç–æ–∫–∞–Ω–∞–ª {auto_channel.name}")

        prefix = "_ZP" if auto_channel.name == "üîäPosluch√°re≈à" else " "

        # –ü–æ–∏—Å–∫ –∑–∞–Ω—è—Ç—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        existing_numbers = set()
        for channel in category.voice_channels:
            if channel.name.startswith(auto_channel.name + prefix):
                try:
                    num = int(channel.name.replace(auto_channel.name + prefix, "").strip())
                    existing_numbers.add(num)
                except ValueError:
                    continue

        # –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
        new_number = 1
        while new_number in existing_numbers:
            new_number += 1

        new_channel_name = f"{auto_channel.name}{prefix}{new_number}"

        # print(f"[CREATE] –°–æ–∑–¥–∞—ë—Ç—Å—è –∫–∞–Ω–∞–ª: {new_channel_name}")

        # –ü—Ä–∞–≤–∞
        overwrites = {
            guild.default_role: nextcord.PermissionOverwrite(connect=False),
            member: nextcord.PermissionOverwrite(connect=True, manage_channels=True),
        }

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        new_channel = await guild.create_voice_channel(
            name=new_channel_name,
            overwrites=overwrites,
            category=category
        )

        await member.move_to(new_channel)
        # print(f"[MOVE] {member} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ {new_channel.name}")

    # === –£–î–ê–õ–ï–ù–ò–ï –ü–£–°–¢–û–ì–û –ö–ê–ù–ê–õ–ê ===
    if before.channel:
        if before.channel.id in AUTO_CHANNELS:
            return

        if before.channel.category_id not in AUTO_CHANNELS.values():
            return

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–º—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ü–∏—Ñ—Ä—É
        if not re.search(r"\d+$", before.channel.name):
            return

        # print(f"[CHECK] {member} –ø–æ–∫–∏–Ω—É–ª {before.channel.name}, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(5)

        if len(before.channel.members) == 0:
            try:
                await before.channel.delete()
                # print(f"[DELETE] –£–¥–∞–ª—ë–Ω –ø—É—Å—Ç–æ–π –∫–∞–Ω–∞–ª: {before.channel.name}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {before.channel.name}: {e}")


import json
import nextcord
from nextcord.ext import commands

@bot.command()
async def petition(ctx, *, text=None):
    await ctx.message.delete()
    if text is None:
        await ctx.send(
            "‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ: `!petition <—Ç–µ–∫—Å—Ç –ø–µ—Ç–∏—Ü–∏–∏>`\n"
            "–ü—Ä–∏–º–µ—Ä: `!petition –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä`",
            delete_after=15
        )
        return

    try:
        with open("petitions.json", "r", encoding="utf-8") as f:
            petitions = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        petitions = []

    petition_id = len(petitions) + 1
    required_votes = max(1, int(ctx.guild.member_count * 0.1))

    petition_data = {
        "id": petition_id,
        "author": ctx.author.id,
        "text": text,
        "votes": 0,
        "voters": [],
        "status": "active",
        "reviewed_by": None,
        "message_id": None,
        "required_votes": required_votes
    }

    petitions.append(petition_data)

    with open("petitions.json", "w", encoding="utf-8") as f:
        json.dump(petitions, f, indent=4)

    sent_message = await ctx.send(
        f"**–ü–µ—Ç–∏—Ü–∏—è ‚Ññ{petition_id}**\n{text}\n\n"
        f"–ê–≤—Ç–æ—Ä: <@{ctx.author.id}>\n"
        f"–ü–æ–¥–ø–∏—Å–µ–π: 0/{required_votes}\n"
        f"–ü–æ–¥–ø–∏—à–∏ –ø–µ—Ç–∏—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π: `!vote {petition_id}`"
    )

    petition_data["message_id"] = sent_message.id
    with open("petitions.json", "w", encoding="utf-8") as f:
        json.dump(petitions, f, indent=4)


@bot.command()
async def vote(ctx, petition_id: int = None):
    await ctx.message.delete()

    if petition_id is None:
        await ctx.send("‚ùó –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –ø–µ—Ç–∏—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: `!vote 1`", delete_after=10)
        return

    try:
        with open("petitions.json", "r", encoding="utf-8") as f:
            petitions = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        await ctx.send("‚ùó –ü–µ—Ç–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", delete_after=10)
        return

    petition = next((p for p in petitions if p["id"] == petition_id), None)

    if not petition:
        await ctx.send("‚ùó –ü–µ—Ç–∏—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", delete_after=10)
        return

    if petition["status"] != "active":
        await ctx.send("‚ùå –≠—Ç–∞ –ø–µ—Ç–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –µ—ë –Ω–µ–ª—å–∑—è.", delete_after=10)
        return

    if str(ctx.author.id) in petition["voters"]:
        await ctx.send("üîÅ –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª —ç—Ç—É –ø–µ—Ç–∏—Ü–∏—é.", delete_after=10)
        return

    petition["votes"] += 1
    petition["voters"].append(str(ctx.author.id))

    with open("petitions.json", "w", encoding="utf-8") as f:
        json.dump(petitions, f, indent=4)

    content = (
        f"**–ü–µ—Ç–∏—Ü–∏—è ‚Ññ{petition['id']}**\n"
        f"{petition['text']}\n\n"
        f"–ê–≤—Ç–æ—Ä: <@{petition['author']}>\n"
        f"–ü–æ–¥–ø–∏—Å–µ–π: {petition['votes']}/{petition['required_votes']}"
    )

    if petition["votes"] >= petition["required_votes"]:
        content += "\n\nüîî –ü–µ—Ç–∏—Ü–∏—è –¥–æ—Å—Ç–∏–≥–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞."

    try:
        # –û–±–Ω–æ–≤–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ç–∏—Ü–∏–µ–π, –µ—Å–ª–∏ –æ–Ω–æ –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        channel = ctx.channel
        message = await channel.fetch_message(petition["message_id"])
        await message.edit(content=content)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ç–∏—Ü–∏–∏ #{petition_id}] {e}")

    await ctx.send("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª –ø–µ—Ç–∏—Ü–∏—é.", delete_after=5)


@bot.command()
async def yes(ctx, petition_id: int):
    await ctx.message.delete()
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", delete_after=10)
        return

    try:
        with open("petitions.json", "r", encoding="utf-8") as f:
            petitions = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        await ctx.send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ç–∏—Ü–∏–π.", delete_after=10)
        return

    for petition in petitions:
        if petition["id"] == petition_id:
            if petition["status"] != "active":
                await ctx.send("–≠—Ç–∞ –ø–µ—Ç–∏—Ü–∏—è —É–∂–µ –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.", delete_after=15)
                return

            if petition["votes"] < petition["required_votes"]:
                await ctx.send(
                    f"–ü–µ—Ç–∏—Ü–∏—è –µ—â—ë –Ω–µ –Ω–∞–±—Ä–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.\n"
                    f"–¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞: {petition['votes']}/{petition['required_votes']}",
                    delete_after=15
                )
                return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
            if "reviews" not in petition:
                petition["reviews"] = {"yes": [], "no": []}

            if ctx.author.id in petition["reviews"]["yes"] or ctx.author.id in petition["reviews"]["no"]:
                await ctx.send("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç—É –ø–µ—Ç–∏—Ü–∏—é.", delete_after=10)
                return

            petition["reviews"]["yes"].append(ctx.author.id)

            total_votes = len(petition["reviews"]["yes"]) + len(petition["reviews"]["no"])
            if total_votes >= 4:
                if len(petition["reviews"]["yes"]) > len(petition["reviews"]["no"]):
                    petition["status"] = "approved"
                else:
                    petition["status"] = "rejected"

            with open("petitions.json", "w", encoding="utf-8") as f:
                json.dump(petitions, f, indent=4)

            if petition["status"] != "active":
                msg = await ctx.fetch_message(petition["message_id"])
                result_text = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if petition["status"] == "approved" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                await msg.edit(content=
                    f"**–ü–µ—Ç–∏—Ü–∏—è ‚Ññ{petition['id']}**\n"
                    f"{petition['text']}\n\n"
                    f"–ê–≤—Ç–æ—Ä: <@{petition['author']}>\n"
                    f"–ü–æ–¥–ø–∏—Å–µ–π: {petition['votes']}/{petition['required_votes']}\n\n"
                    f"{result_text} –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", view=None)

            else:
                await ctx.send(f"–í–∞—à –≥–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç–∞–Ω. –°–µ–π—á–∞—Å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ {total_votes}/4 –∞–¥–º–∏–Ω–æ–≤.", delete_after=10)
            return

    await ctx.send("–ü–µ—Ç–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", delete_after=10)



@bot.command()
async def no(ctx, petition_id: int):
    await ctx.message.delete()
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", delete_after=10)
        return

    try:
        with open("petitions.json", "r", encoding="utf-8") as f:
            petitions = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        await ctx.send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ç–∏—Ü–∏–π.", delete_after=10)
        return

    for petition in petitions:
        if petition["id"] == petition_id:
            if petition["status"] != "active":
                await ctx.send("–≠—Ç–∞ –ø–µ—Ç–∏—Ü–∏—è —É–∂–µ –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.", delete_after=15)
                return

            if petition["votes"] < petition["required_votes"]:
                await ctx.send(
                    f"–ü–µ—Ç–∏—Ü–∏—è –µ—â—ë –Ω–µ –Ω–∞–±—Ä–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.\n"
                    f"–¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞: {petition['votes']}/{petition['required_votes']}",
                    delete_after=15
                )
                return

            if "reviews" not in petition:
                petition["reviews"] = {"yes": [], "no": []}

            if ctx.author.id in petition["reviews"]["yes"] or ctx.author.id in petition["reviews"]["no"]:
                await ctx.send("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç—É –ø–µ—Ç–∏—Ü–∏—é.", delete_after=10)
                return

            petition["reviews"]["no"].append(ctx.author.id)

            total_votes = len(petition["reviews"]["yes"]) + len(petition["reviews"]["no"])
            if total_votes >= 4:
                if len(petition["reviews"]["yes"]) > len(petition["reviews"]["no"]):
                    petition["status"] = "approved"
                else:
                    petition["status"] = "rejected"

            with open("petitions.json", "w", encoding="utf-8") as f:
                json.dump(petitions, f, indent=4)

            if petition["status"] != "active":
                msg = await ctx.fetch_message(petition["message_id"])
                result_text = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if petition["status"] == "approved" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                await msg.edit(content=
                    f"**–ü–µ—Ç–∏—Ü–∏—è ‚Ññ{petition['id']}**\n"
                    f"{petition['text']}\n\n"
                    f"–ê–≤—Ç–æ—Ä: <@{petition['author']}>\n"
                    f"–ü–æ–¥–ø–∏—Å–µ–π: {petition['votes']}/{petition['required_votes']}\n\n"
                    f"{result_text} –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", view=None)

            else:
                await ctx.send(f"–í–∞—à –≥–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç–∞–Ω. –°–µ–π—á–∞—Å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ {total_votes}/4 –∞–¥–º–∏–Ω–æ–≤.", delete_after=10)
            return

    await ctx.send("–ü–µ—Ç–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", delete_after=10)


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É help
bot.help_command = MyHelpCommand()
load_dotenv()
TOKEN = os.getenv("DISCORD_BOT_TOKEN")
bot.run(TOKEN)
